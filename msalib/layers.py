import tensorflow as tf
Base = tf.layers 


class MSALayer(Base.Layer):
    """–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è Layers, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π 
    –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ MSA. –í—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 
    –ø–æ–¥–ø–∏—Å–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã –±—É–¥—É—Ç –Ω–∞—á–∞—Ç—å—Å—è —Å msa_
    https://www.tensorflow.org/api_docs/python/tf/layers/Layer
    """
    def __init__(self, *args, msa_rho=0.1, msa_reg=0.1,
                 msa_trainable=True, **kwargs):
        """msa_rho - –≤–µ–∫—Ç–æ—Ä —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, msa_reg - 
        """
        super().__init__(*args, **kwargs)
        self.msa_rho = tf.placeholder_with_default(
            msa_rho, [], 'msa_rho')
        """https://www.tensorflow.org/api_docs/python/tf/add_to_collection
        """
        tf.add_to_collection('msa_rho', self.msa_rho)
        self.msa_reg = msa_reg
        self.msa_trainable = msa_trainable

    def msa_regularizer(self):
        if self.variables:
            return self.msa_reg * tf.add_n([
                tf.nn.l2_loss(v) for v in self.variables])
        else:
            return 0.0

    def msa_hamiltonian(self, x, p):
        """ùêª(ùë°, ùë•, ùíë, ùúΩ) = ‚å©ùíë, ùíá(ùë°, ùíô, ùúΩ)‚å™ 
        """
        return tf.reduce_sum(p * self.apply(x))

    def msa_backward(self, x, p):
        """–í—ã—á–∏—Å–ª—è–µ—Ç p_{n}

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            x {tf tensor} -- x_{n}
            p {tf tensor} -- p_{n+1}

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            tf tensor -- p_{n}
        """

        x = tf.stop_gradient(x)
        p = tf.stop_gradient(p)
        H = self.msa_hamiltonian(x, p)
        return tf.gradients(H, x)[0]

    def msa_minus_H_aug(self, x, y, p, q):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            x {tf tensor} -- x_{n}
            y {tf tensor} -- x_{n+1}
            p {tf tensor} -- p_{n+1}
            q {tf tensor} -- p_{n}

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            tf tensor -- –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω
        """

        x, y, p, q = [tf.stop_gradient(t) for t in [x, y, p, q]]
        dHdp = self.apply(x)
        H = tf.reduce_sum(p * dHdp) - self.msa_regularizer()
        dHdx = tf.gradients(H, x)[0]
        x_feasibility = self.msa_rho * tf.nn.l2_loss(y - dHdp)
        p_feasibility = self.msa_rho * tf.nn.l2_loss(q - dHdx)
        return - H + x_feasibility + p_feasibility


class Dense(Base.Dense, MSALayer):
    """https://www.tensorflow.org/api_docs/python/tf/layers/dense
       –ü—Ä–∞–≤–ª—å–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å keras.layers.Dense
    """
    pass


class ResidualDense(Dense):
    """–û—Å—Ç–∞—Ç–æ—á–Ω—ã–π Dense —Å–ª–æ–π
    """

    def __init__(self, *args, delta=0.1, **kwargs):
        super().__init__(*args, **kwargs)
        self.msa_delta = delta

    def call(self, inputs):
        return inputs + self.msa_delta * super().call(inputs)


class Conv2D(Base.Conv2D, MSALayer):
    pass


class ResidualConv2D(Conv2D):
    """–û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π 2D
    """

    def __init__(self, *args, delta=0.1, **kwargs):
        super().__init__(*args, **kwargs)
        self.msa_delta = delta

    def call(self, inputs):
        return inputs + self.msa_delta * super().call(inputs)


class Lower(MSALayer):
    """–ù–∏–∂–Ω–∏–π —Å–ª–æ–π
    """

    def __init__(self, *args, lower_axis=-1, **kwargs):
        super().__init__(*args, **kwargs)
        self.lower_axis = lower_axis
        self.msa_trainable = False

    def call(self, inputs):
        return tf.reduce_mean(inputs, axis=self.lower_axis, keepdims=True)


class Flatten(Base.Flatten, MSALayer):
    """Flatten —Å–ª–æ–π
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.msa_trainable = False


class AveragePooling2D(Base.AveragePooling2D, MSALayer):
    """–û–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å–ª–æ–π –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.msa_trainable = False
